load_all("./BIOS-735-Project-Diabetes-Prediction/predict.bios735")
library(devtools)
load_all("./BIOS-735-Project-Diabetes-Prediction/predict.bios735")
load_all("../BIOS-735-Project-Diabetes-Prediction/predict.bios735")
start = Sys.time()
lambda_ <- c(seq(0.,0.01,-0.01),seq(0.01, 0.0008, by = -0.001))
seq(0.01, 0.0008, by = -0.001)
0.,0.01,-0.01)
seq(0.,0.01,-0.01)
start = Sys.time()
lambda_ <- c(seq(0.0,0.01,0.001),seq(0.01, 0.0008, by = -0.001))
own.logit_all = penalized.logit(X,y, beta = beta0, lambda =  lambda_)
## Loading our package
load_all("BIOS-735-Project-Diabetes-Prediction/predict.bios735")
library(devtools)
## Loading our package
load_all("BIOS-735-Project-Diabetes-Prediction/predict.bios735")
## Loading our package
load_all("../BIOS-735-Project-Diabetes-Prediction/predict.bios735")
start = Sys.time()
lambda_ <- c(seq(0.0,0.01,0.001),seq(0.01, 0.0008, by = -0.001))
own.logit_all = penalized.logit(X,y, beta = beta0, lambda =  lambda_)
### load the data, and create the design matrix
X = x = scale(model.matrix(diabetes ~ Age + Gender + BMI + SBP + DBP + height +
Triglyceride + ALT + AST + BUN + CCR + Cholesterol +
factor(smoke) + factor(drink) + factor(history), data = diabetes_train)[,-1])
y = diabetes_train$diabetes
x_test = scale(model.matrix(diabetes ~ Age + Gender + BMI + SBP + DBP + height +
Triglyceride + ALT + AST + BUN + CCR + Cholesterol +
factor(smoke) + factor(drink) + factor(history), data = diabetes_test)[,-1])
y_test = diabetes_test$diabetes
start = Sys.time()
lambda_ <- c(seq(0.0,0.01,0.001),seq(0.01, 0.0008, by = -0.001))
own.logit_all = penalized.logit(X,y, beta = beta0, lambda =  lambda_)
### own solution
beta0 = glm(y~X, family = "binomial")$coefficients
start = Sys.time()
lambda_ <- c(seq(0.0,0.01,0.001),seq(0.01, 0.0008, by = -0.001))
own.logit_all = penalized.logit(X,y, beta = beta0, lambda =  lambda_)
colnames(own.logit_all) = paste0("X",round(lambda_,4))
df_plogit = data.frame(own.logit_all)
df_plogit$Variable = row.names(own.logit_all)
df_plogit = pivot_longer(df_plogit, cols = -Variable, names_to = "Lambda", values_to = "Estimate") %>%
filter(Variable != "(Intercept)")
## loading libraries
library(dplyr)
library(glmnet)
library(tidyr)
library(ggplot2)
library(devtools)
library(glmnet)
library(caret)
start = Sys.time()
lambda_ <- c(seq(0.0,0.01,0.001),seq(0.01, 0.0008, by = -0.001))
own.logit_all = penalized.logit(X,y, beta = beta0, lambda =  lambda_)
colnames(own.logit_all) = paste0("X",round(lambda_,4))
df_plogit = data.frame(own.logit_all)
df_plogit$Variable = row.names(own.logit_all)
df_plogit = pivot_longer(df_plogit, cols = -Variable, names_to = "Lambda", values_to = "Estimate") %>%
filter(Variable != "(Intercept)")
df_plogit$lambda = as.numeric(gsub("X", "", df_plogit$Lambda))
df_plogit$Variable = gsub("X", "", df_plogit$Variable)
ref.values = data.frame("Value" = rep(seq(-.5,1, length = 5),2),
"Model" = c(rep("cv.glmnet",5),rep("cv.penalized.logit",5)),
"Lambda" = c(rep(cv_glm$lambda.1se,5),rep(cv_lambda$se.1.lambda,5)))
start = Sys.time()
lambda_ <- c(seq(0.0,0.01,0.001),seq(0.01, 0.0008, by = -0.001))
own.logit_all = penalized.logit(X,y, beta = beta0, lambda =  lambda_)
colnames(own.logit_all) = paste0("X",round(lambda_,4))
df_plogit = data.frame(own.logit_all)
df_plogit$Variable = row.names(own.logit_all)
df_plogit = pivot_longer(df_plogit, cols = -Variable, names_to = "Lambda", values_to = "Estimate") %>%
filter(Variable != "(Intercept)")
df_plogit$lambda = as.numeric(gsub("X", "", df_plogit$Lambda))
df_plogit$Variable = gsub("X", "", df_plogit$Variable)
#ref.values = data.frame("Value" = rep(seq(-.5,1, length = 5),2),
#                        "Model" = c(rep("cv.glmnet",5),rep("cv.penalized.logit",5)),
#                        "Lambda" = c(rep(cv_glm$lambda.1se,5),rep(cv_lambda$se.1.lambda,5)))
ggplot(df_plogit,
mapping = aes(x = log(lambda), y = Estimate, color = Variable )) +
theme_bw() +
geom_line() +
#    geom_vline(xintercept = log(cv_glm$lambda.1se),color="red", linetype = "dashed") +
#    geom_vline(xintercept = log(cv_lambda$se.1.lambda),color="blue", linetype = "dashed")
end = Sys.time()
start = Sys.time()
lambda_ <- c(seq(0.0,0.01,0.001),seq(0.01, 0.0008, by = -0.001))
own.logit_all = penalized.logit(X,y, beta = beta0, lambda =  lambda_)
colnames(own.logit_all) = paste0("X",round(lambda_,4))
df_plogit = data.frame(own.logit_all)
df_plogit$Variable = row.names(own.logit_all)
df_plogit = pivot_longer(df_plogit, cols = -Variable, names_to = "Lambda", values_to = "Estimate") %>%
filter(Variable != "(Intercept)")
df_plogit$lambda = as.numeric(gsub("X", "", df_plogit$Lambda))
df_plogit$Variable = gsub("X", "", df_plogit$Variable)
#ref.values = data.frame("Value" = rep(seq(-.5,1, length = 5),2),
#                        "Model" = c(rep("cv.glmnet",5),rep("cv.penalized.logit",5)),
#                        "Lambda" = c(rep(cv_glm$lambda.1se,5),rep(cv_lambda$se.1.lambda,5)))
ggplot(df_plogit,
mapping = aes(x = log(lambda), y = Estimate, color = Variable )) +
theme_bw() +
geom_line() # +
#    geom_vline(xintercept = log(cv_glm$lambda.1se),color="red", linetype = "dashed") +
#    geom_vline(xintercept = log(cv_lambda$se.1.lambda),color="blue", linetype = "dashed")
end = Sys.time()
duration=end-start; print(duration)
seq(0.0,0.01,0.001)
start = Sys.time()
lambda_ <- c(seq(1,0.01,-0.01),seq(0.01, 0.0008, by = -0.001))
own.logit_all = penalized.logit(X,y, beta = beta0, lambda =  lambda_)
colnames(own.logit_all) = paste0("X",round(lambda_,4))
df_plogit = data.frame(own.logit_all)
df_plogit$Variable = row.names(own.logit_all)
df_plogit = pivot_longer(df_plogit, cols = -Variable, names_to = "Lambda", values_to = "Estimate") %>%
filter(Variable != "(Intercept)")
df_plogit$lambda = as.numeric(gsub("X", "", df_plogit$Lambda))
df_plogit$Variable = gsub("X", "", df_plogit$Variable)
#ref.values = data.frame("Value" = rep(seq(-.5,1, length = 5),2),
#                        "Model" = c(rep("cv.glmnet",5),rep("cv.penalized.logit",5)),
#                        "Lambda" = c(rep(cv_glm$lambda.1se,5),rep(cv_lambda$se.1.lambda,5)))
ggplot(df_plogit,
mapping = aes(x = log(lambda), y = Estimate, color = Variable )) +
theme_bw() +
geom_line() # +
#    geom_vline(xintercept = log(cv_glm$lambda.1se),color="red", linetype = "dashed") +
#    geom_vline(xintercept = log(cv_lambda$se.1.lambda),color="blue", linetype = "dashed")
end = Sys.time()
duration=end-start; print(duration)
seq(1,0.01,-0.01)
start = Sys.time()
lambda_ <- c(seq(1,0.01,-0.1),seq(0.01, 0.0008, by = -0.002))
own.logit_all = penalized.logit(X,y, beta = beta0, lambda =  lambda_)
colnames(own.logit_all) = paste0("X",round(lambda_,4))
df_plogit = data.frame(own.logit_all)
df_plogit$Variable = row.names(own.logit_all)
df_plogit = pivot_longer(df_plogit, cols = -Variable, names_to = "Lambda", values_to = "Estimate") %>%
filter(Variable != "(Intercept)")
df_plogit$lambda = as.numeric(gsub("X", "", df_plogit$Lambda))
df_plogit$Variable = gsub("X", "", df_plogit$Variable)
#ref.values = data.frame("Value" = rep(seq(-.5,1, length = 5),2),
#                        "Model" = c(rep("cv.glmnet",5),rep("cv.penalized.logit",5)),
#                        "Lambda" = c(rep(cv_glm$lambda.1se,5),rep(cv_lambda$se.1.lambda,5)))
ggplot(df_plogit,
mapping = aes(x = log(lambda), y = Estimate, color = Variable )) +
theme_bw() +
geom_line() # +
#    geom_vline(xintercept = log(cv_glm$lambda.1se),color="red", linetype = "dashed") +
#    geom_vline(xintercept = log(cv_lambda$se.1.lambda),color="blue", linetype = "dashed")
end = Sys.time()
duration=end-start; print(duration)
start = Sys.time()
lambda_ <- c(seq(1,0.01,-0.05),seq(0.01, 0.0008, by = -0.002))
own.logit_all = penalized.logit(X,y, beta = beta0, lambda =  lambda_)
colnames(own.logit_all) = paste0("X",round(lambda_,4))
df_plogit = data.frame(own.logit_all)
df_plogit$Variable = row.names(own.logit_all)
df_plogit = pivot_longer(df_plogit, cols = -Variable, names_to = "Lambda", values_to = "Estimate") %>%
filter(Variable != "(Intercept)")
df_plogit$lambda = as.numeric(gsub("X", "", df_plogit$Lambda))
df_plogit$Variable = gsub("X", "", df_plogit$Variable)
#ref.values = data.frame("Value" = rep(seq(-.5,1, length = 5),2),
#                        "Model" = c(rep("cv.glmnet",5),rep("cv.penalized.logit",5)),
#                        "Lambda" = c(rep(cv_glm$lambda.1se,5),rep(cv_lambda$se.1.lambda,5)))
ggplot(df_plogit,
mapping = aes(x = log(lambda), y = Estimate, color = Variable )) +
theme_bw() +
geom_line() # +
#    geom_vline(xintercept = log(cv_glm$lambda.1se),color="red", linetype = "dashed") +
#    geom_vline(xintercept = log(cv_lambda$se.1.lambda),color="blue", linetype = "dashed")
end = Sys.time()
duration=end-start; print(duration)
install.packages("~/Documentos/UNC Chapel Hill/>>> Spring 2024/BIOS735/Final project/BIOS-735-Project-Diabetes-Prediction/predictbios.tar.gz", repos = NULL, type = "source")
devtools::install(../BIOS-735-Project-Diabetes-Prediction/predict.bios735)
devtools::install("../BIOS-735-Project-Diabetes-Prediction/predict.bios735")
load_all("../BIOS-735-Project-Diabetes-Prediction/predict.bios735")
document("../BIOS-735-Project-Diabetes-Prediction/predict.bios735")
devtools::install("../BIOS-735-Project-Diabetes-Prediction/predict.bios735")
